Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:


    /* * * SQL CODE: * * */
    -- Return the total number of records, or rows, in a table
    SELECT COUNT(*) 
    -- The name of the table to be queried replaces {table name}:
    FROM {table name} 
    /* * * * * * * * * * */


i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	
-----

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.


    /* * * SQL CODE: * * */
    -- Return the number of distinct records, or rows, in a named column:
    SELECT COUNT(DISTINCT {primary/foreign key}) 
    FROM {table name} 
    /* * * * * * * * * * */

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 537, by foreign key "user_id"
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

-----

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
SQL code used to arrive at answer:

/* * * SQL CODE: * * */
-- The query below returns all entries in the Users table containing a null value in any column
SELECT *
FROM user
WHERE (id OR name OR review_count OR yelping_since OR useful OR funny OR cool 
    OR fans OR average_stars OR compliment_hot OR compliment_more 
    OR compliment_profile OR compliment_cute OR compliment_list OR compliment_note
    OR compliment_plain OR compliment_cool OR compliment_funny OR compliment_writer
    OR compliment_photos) IS NULL
/* * * * * * * * * * */

-----

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0	max: 5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		
-----

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

/* * * SQL CODE: * * */
/* This queries the business table
and returns two columns: "city" and "# of reviews."
The second column is created by taking the sum of the "review_count" 
when the entries are grouped by city. */

SELECT city
,SUM(review_count) AS "# of reviews"
FROM business
GROUP BY city
ORDER BY "# of reviews" DESC
/* * * * * * * * * * */

	Copy and Paste the Result Below:

+-----------------+--------------+
| city            | # of reviews |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| Montréal        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |
+-----------------+--------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
-----

6. Find the distribution of star ratings to the business in the following cities:

>> i. Avon

    SQL code used to arrive at answer:
/* * * SQL CODE: * * */
/* this queries the business table and returns a count of the businesses 
having each star rating, in the city of Avon. */

SELECT stars AS "star rating"
,COUNT(id) AS "# of businesses"
FROM business
WHERE city = "Avon"
GROUP BY stars
/* * * * * * * * * * */

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-----------------+
| star rating | # of businesses |
+-------------+-----------------+
|         1.5 |               1 |
|         2.5 |               2 |
|         3.5 |               3 |
|         4.0 |               2 |
|         4.5 |               1 |
|         5.0 |               1 |
+-------------+-----------------+


>> ii. Beachwood

    SQL code used to arrive at answer:
/* * * SQL CODE: * * */
/* this queries the business table and returns a count of the businesses 
having each star rating, in the city of Beachwood. */

SELECT stars AS "star rating"
,COUNT(id) AS "# of businesses"
FROM business
WHERE city = "Beachwood"
GROUP BY stars
/* * * * * * * * * */

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-----------------+
| star rating | # of businesses |
+-------------+-----------------+
|         2.0 |               1 |
|         2.5 |               1 |
|         3.0 |               2 |
|         3.5 |               2 |
|         4.0 |               1 |
|         4.5 |               2 |
|         5.0 |               5 |
+-------------+-----------------+

-----

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

/* * * SQL CODE: * * */
SELECT id
,name
,review_count
FROM user
ORDER BY review_count DESC
LIMIT 3
/* * * * * * * * * * */
		
	Copy and Paste the Result Below:

+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+		

-----

8. Does posting more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
I looked at the number of fans for the 25 users with the most reviews (see query & results below). 
It doesn't seem that having more reviews is at all correlated with also having more fans, as the users with the most reviews have a broad range in the number of fans they each have, from only 10 to almost 500 fans!

/* * * SQL CODE: * * */
SELECT name
,review_count
,fans
FROM user
ORDER BY review_count DESC
LIMIT 25;
/* * * * * * * * * * */

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+

-----
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	>> Answer:
There are more reviews containing the word "love" (1780) than those containing the word "hate" (232).
	
    SQL code used to arrive at answer:

This query returns the number of reviews containing the word "love." (1780)
/* * * SQL CODE: * * */
SELECT COUNT(*)
FROM review
WHERE text LIKE "%love%";
/* * * * * * * * * * */

This query returns the number of reviews that contain the word "hate." (232)
/* * * SQL CODE: * * */
SELECT COUNT (*)
FROM review
WHERE text LIKE "%hate%";
/* * * * * * * * * * */

-----

10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

/* * * SQL CODE: * * */
SELECT name
,fans
FROM user
ORDER BY fans DESC
LIMIT 10;	
/* * * * * * * * * * */

	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	

--------------------


Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

+-------------+-----------------+--------------+----------------------+--------------+-------------+
| star rating | # of businesses | review_count | hours                | neighborhood | postal_code |
+-------------+-----------------+--------------+----------------------+--------------+-------------+
| 2-3 stars   |              14 |           28 | Saturday|11:00-3:00  | Oakland      | 15213       |
| 4-5 stars   |               7 |            8 | Saturday|10:00-18:00 |              | 15205       |
+-------------+-----------------+--------------+----------------------+--------------+-------------+
	
>> i. Do the two groups you chose to analyze have a different distribution of hours?
Yes, the groups have a different distribution of hours.
It's not entirely clear to me how the value is derived in the hours column once the businesses are grouped by star ratings.
However, the result does indicate a different distribution of hours.
The group of restaurants & shopping businesses in Pittsburgh having ratings of 2-3 stars seem to be open for more hours (11:00-3:00, or 16 hours), at least on Saturdays, than the group of those having ratings of 4-5 stars (10:00-18:00, or 8 hours).

>> ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, the group of businesses having 4-5 stars have fewer reviews (8) than those having 2-3 stars (28).
This result is not surprising as the more time a business is open, then the more opportunity there is for possible customers, some of whom may later leave a review. 
In other words, having more reviews suggests also having more customers, which suggests having more opportunity to host customers (e.g. time being open).
         
>> iii. Are you able to infer anything from the location data provided between these two groups? Explain.
Yes, the groups differ in neighborhoods and postal codes. 
It seems that certain areas of Pittsburgh tend to have longer or shorter hours.
It may be interesting to further investigate any correlation between location data and business categories,
along with other variables such as crime rate, income level, education, etc.

SQL code used for analysis:
/* * * SQL CODE: * * */
SELECT
CASE
    WHEN b.stars >= 2 AND b.stars <= 3 THEN "2-3 stars" -- groups the businesses having these stars
    WHEN b.stars >= 4 AND b.stars <= 5 THEN "4-5 stars"  -- and those having these stars
    ELSE b.stars -- otherwise, it copies value from star column
    END AS "star rating" -- creates a new column with values following the above rules
,COUNT(b.id) AS "# of businesses"
,b.review_count
,h.hours
,neighborhood
,b.postal_code
FROM business b JOIN category c ON b.id = c.business_id JOIN hours h ON b.id = h.business_id
WHERE b.city = "Pittsburgh" 
    AND (c.category = "Shopping" OR c.category = "Restaurants")
    AND ((stars <= 3 AND stars >= 2) OR (stars <= 5 AND stars >= 4))
GROUP BY "star rating"
/* * * * * * * * * * */

-----
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

+-------------+-----------------+--------------+------------+
| Still open? | # of businesses | # of reviews | avg rating |
+-------------+-----------------+--------------+------------+
| Yes         |            8480 |       269300 |       3.68 |
| No          |            1520 |        35261 |       3.52 |
+-------------+-----------------+--------------+------------+
		
>> i. Difference 1:
There are several more businesses that are still open (8480) than not (1520).
         
>> ii. Difference 2:
Businesses that are open have significantly more reviews (269300) than those that are closed (35261).
         
         
SQL code used for analysis:
        /* * * SQL CODE: * * */
        SELECT
        CASE
            WHEN is_open = 1 THEN "Yes"
            WHEN is_open = 0 THEN "No"
            END "Still open?"
        ,COUNT(id) AS "# of businesses"
        ,SUM(review_count) AS "# of reviews"
        ,ROUND(AVG(stars),2) AS "avg rating"
        FROM business
        GROUP BY "Still open?" 
        ORDER BY "Still open?" DESC
        /* * * * * * * * * * */

-----

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:

>> i. Indicate the type of analysis you chose to do:

I'm going to conduct a sentiment analysis of businesses by parsing out keywords in review text related to gambling. I'll infer and then group together customer sentiment (i.e. the presence of certain keywords in reviews) and look at the average ratings of businesses associated with gambling.

>> ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

This analysis is predicated on the assumption that certain keywords will be valid indicators of customer sentiment, so it's important that a variety of appropriate words are included in each set.
There's also a risk of erroneously including reviews that contain a keyword, yet don't actually reference gambling. To help prevent the inclusion of such irrelevant reviews, I'll limit analysis to the reviews that also contain certain "neutral" keywords related to gambling, i.e. also include other indication of semantic relevance.

SETS OF KEYWORDS:

POSITIVE: "%great%" OR "%fun%" OR "%win%" OR "%won%" OR "% luck%" OR "%amazing%"
-- The presence of these words are used as indicators of positive sentiment

NEGATIVE: "%unlucky%" OR "%lose%" OR "%lost%" OR "%waste%" OR "%disappoint%" OR "%broke%" OR "%afford%"
-- These keywords indicate negative sentiment

NEUTRAL: "%casino%" OR "%gambl%" OR "%play%" OR "%slots%" OR "%roulette%" OR "%blackjack%" OR "%poker%" OR "%drinks%" OR "%machine%" OR "%keno%"
-- Only reviews containing at least one of these words will be used in analysis


Parsing a large pool of reviews will also be important -- A high frequency of keyword occurrence from a large set of reviews will help "normalize" the inherent imprecision that comes with extrapolating qualitative opinions (i.e. customer sentiment) from a quantitative method, especially from (merely) the occurrence of certain keywords.

I first intended to limit this analysis to businesses in Las Vegas, and perhaps to then further filter for certain business categories, such as nightlife, arcade, entertainment, etc. 
However, I quickly realized that this would greatly reduce the pool of reviews from which there'd be further parsing for sentiment keywords (see below query). So, I decided to instead start by parsing through ALL reviews from ALL the cities contained in the Yelp dataset.
+-------------------+------------------------------+
| Business Category | # of businesses in Las Vegas |
+-------------------+------------------------------+
| Health & Medical  |                            4 |
| Restaurants       |                            4 |
| Shopping          |                            4 |
| American (New)    |                            2 |
| Beauty & Spas     |                            2 |
| Doctors           |                            2 |
| Food              |                            2 |
| Home Services     |                            2 |
| Hotels & Travel   |                            2 |
| Active Life       |                            1 |
+-------------------+------------------------------+
Versus
+------------------------+-----------------------+
| Business Category      | Total # of businesses |
+------------------------+-----------------------+
| Restaurants            |                    71 |
| Shopping               |                    30 |
| Food                   |                    23 |
| Nightlife              |                    20 |
| Bars                   |                    17 |
| Health & Medical       |                    17 |
| Home Services          |                    16 |
| Beauty & Spas          |                    13 |
| Local Services         |                    12 |
| American (Traditional) |                    11 |
+------------------------+-----------------------+
/* * * SQL CODE: * * */
SELECT DISTINCT c.category AS "Business Category"
,count(c.business_id) AS "# of businesses in Las Vegas"
FROM business b JOIN category c ON b.id = c.business_id
WHERE b.city = "Las Vegas" -- limits to businesses in Las Vegas
GROUP BY c.category
ORDER BY count(c.business_id) DESC
LIMIT 10
/* * * * * * * * * * */

>> iii. Output of your finished dataset:
+--------------------+-----------------+---------------------+
| Gambling Sentiment | # of businesses | Avg Business Rating |
+--------------------+-----------------+---------------------+
| Positive           |              47 |                3.77 |
| Negative           |               4 |                 3.0 |
+--------------------+-----------------+---------------------+
         
>> iv. Provide the SQL code you used to create your final dataset:
/* * * SQL CODE: * * */
SELECT
CASE
    WHEN (r.text LIKE "%great%" OR r.text LIKE "%fun%" OR r.text LIKE "%win%" OR r.text LIKE "%won%" OR r.text LIKE "% luck%" OR r.text LIKE "%amazing%")
    	THEN "Positive"
    WHEN (r.text LIKE "%unlucky%" OR r.text LIKE "%lose%" OR r.text LIKE "%lost%" OR r.text LIKE "%waste%" OR r.text LIKE "%disappoint%" OR r.text LIKE "%broke%" OR r.text LIKE "%afford%" OR r.text LIKE "%lame%")
    	THEN "Negative"
    ELSE "unknown"
    END "Gambling Sentiment"
,COUNT(b.id) AS "# of businesses"
,ROUND(AVG(b.stars), 2) AS "Avg Business Rating"
FROM business b JOIN review r ON b.id = r.business_id
WHERE (r.text LIKE "%casino%"  OR r.text LIKE "%gambl%" OR r.text LIKE "%play%" OR r.text LIKE "%slots%" OR r.text LIKE "%roulette%" OR r.text LIKE "%blackjack%" OR r.text LIKE "%poker%" OR r.text LIKE "%drinks%" OR r.text LIKE "%machine%" OR r.text LIKE "%keno%")
GROUP BY "Gambling Sentiment"
HAVING "Gambling Sentiment" = "Positive" OR "Gambling Sentiment" = "Negative"
ORDER BY COUNT(b.id) DESC
/* * * * * * * * * * */